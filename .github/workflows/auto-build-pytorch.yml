name: Auto Build PyTorch

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
  schedule:
    - cron: '0 18 * * *'  # ÊØèÂ§© 18:00 UTC Ëá™Âä®ÊâßË°å

jobs:
  get_latest_tag:
    runs-on: macos-15-intel
    outputs:
      version: ${{ steps.get_tag.outputs.LATEST_VERSION }}
      tag: ${{ steps.get_tag.outputs.LATEST_TAG }}
      skip_build: ${{ steps.get_tag.outputs.skip_build }}
    steps:
      - name: Get latest PyTorch stable tag
        id: get_tag
        run: |
          LATEST_TAG=""
          
          page=1
          while :; do
            echo "Fetching page $page ..."
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/pytorch/pytorch/tags?per_page=100&page=$page")
          
            # Â¶ÇÊûúÂìçÂ∫î‰∏çÊòØÊï∞ÁªÑÂàôÈÄÄÂá∫
            if ! echo "$RESPONSE" | jq -e 'type=="array"' >/dev/null; then
              echo "‚ùå Unexpected response: $RESPONSE"
              exit 1
            fi
          
            # ÊèêÂèñÁ¨¶ÂêàÊ†ºÂºèÁöÑ tag
            TAG=$(echo "$RESPONSE" | jq -r '.[].name' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -Vr | head -n 1)
            if [ -n "$TAG" ]; then
              # ‰∏éÂ∑≤ÊúâÁöÑ LATEST_TAG ÊØîËæÉÂèñÊúÄÊñ∞
              if [ -z "$LATEST_TAG" ] || [ "$(printf "%s\n%s" "$TAG" "$LATEST_TAG" | sort -Vr | head -n1)" = "$TAG" ]; then
                LATEST_TAG="$TAG"
              fi
            fi
          
            # Â¶ÇÊûúÊúâ LATEST_TAG ÂàôË∑≥Âá∫Âæ™ÁéØ
            if [ -n "$LATEST_TAG" ]; then
              break
            fi
          
            # ÊúÄÂ§öÁøª 20 È°µ
            if [ "$page" -ge 20 ]; then
              break
            fi
          
            page=$((page + 1))
          done
          
          if [ -z "$LATEST_TAG" ]; then
            echo "‚ùå No valid tags found."
            exit 1
          fi
          
          echo "Latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "LATEST_VERSION=${LATEST_TAG#v}" >> $GITHUB_OUTPUT

          # Ëé∑ÂèñÂΩìÂâç repo ÁöÑ Releases
          RELEASES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")
          # Âà§Êñ≠ÊòØÂê¶‰∏∫Á©∫Êï∞ÁªÑ
          if echo "$RELEASES_JSON" | jq -e 'length == 0' >/dev/null; then
            echo "‚ÑπÔ∏è No releases found. Will proceed to build $LATEST_TAG."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          else
            EXISTING_TAGS=$(echo "$RELEASES_JSON" | jq -r '.[].tag_name')
            if echo "$EXISTING_TAGS" | grep -q "^$LATEST_TAG$"; then
              if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
                echo "üü¢ Manual run detected. Force building regardless of existing releases."
                echo "skip_build=false" >> $GITHUB_OUTPUT
              else
                echo "‚úÖ $LATEST_TAG already in releases. Skipping build."
                echo "skip_build=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚è≥ $LATEST_TAG not released. Will proceed to build and upload."
              echo "skip_build=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Stop early if already built
        if: steps.get_tag.outputs.skip_build == 'true'
        run: |
          echo "‚úÖ Build skipped."

      - name: Restore PyTorch source from cache
        if: steps.get_tag.outputs.skip_build == 'false'
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: pytorch
          key: pytorch-${{ steps.get_tag.outputs.LATEST_VERSION }}

      - name: Clone PyTorch repo
        if: steps.get_tag.outputs.skip_build == 'false' && steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch "v${{ steps.get_tag.outputs.LATEST_VERSION }}" --recursive https://github.com/pytorch/pytorch.git pytorch
          git -C pytorch submodule update --init --recursive --depth 1 || git -C pytorch submodule update --init --recursive --depth 10 || git -C pytorch submodule update --init --recursive

      - name: Save PyTorch source to cache
        id: cache-save
        if: steps.get_tag.outputs.skip_build == 'false' && steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: pytorch
          key: pytorch-${{ steps.get_tag.outputs.LATEST_VERSION }}

  build_libtorch:
    name: Build LibTorch
    runs-on: macos-15-intel
    needs: [get_latest_tag]
    if: needs.get_latest_tag.outputs.skip_build == 'false'
    steps:
      - name: Restore PyTorch source from cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: pytorch
          key: pytorch-${{ needs.get_latest_tag.outputs.version }}

      - name: Restore LibTorch ccache Cache
        uses: actions/cache/restore@v4
        with:
          path: /Users/runner/Library/Caches/ccache
          key: ccache-LibTorch-${{ needs.get_latest_tag.outputs.tag }}

      - name: Build LibTorch
        env:
          USE_CUDA: "OFF"
          USE_CUDNN: "OFF"
          USE_CUSPARSELT: "OFF"
          USE_MPS: "OFF"
          USE_ROCM: "OFF"
          USE_ROCM_KERNEL_ASSERT: "OFF"
          USE_NNPACK: "ON"
          USE_MPI: "OFF"
          USE_DISTRIBUTED: "ON"
          BLAS: "MKL"
          USE_MKLDNN: "ON"
          USE_OPENMP: "ON"
          PYTORCH_BUILD_VERSION: ${{ needs.get_latest_tag.outputs.version }}
          PYTORCH_BUILD_NUMBER: "1"
          CMAKE_OSX_ARCHITECTURES: "x86_64"
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          BUILD_TEST: "OFF"
          CC: "/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
          CXX: "/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
          LDSHARED: "clang -bundle -undefined dynamic_lookup"
        run: |
          set -e
          
          brew install ccache
          ccache --version
          ccache -s

          sudo xcode-select --switch /Applications/Xcode_16.4.app

          export MAX_JOBS=$(sysctl -n hw.logicalcpu)
          if [ "$MAX_JOBS" -gt 4 ]; then
              export MAX_JOBS=4
          fi
          
          python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r pytorch/requirements.txt
          pip install --force-reinstall cmake==3.31.6
          pip install mkl-static==2023.2.2 mkl-include==2023.2.2

          export CMAKE_PREFIX_PATH="$(realpath venv/lib)"
          export CMAKE_INCLUDE_PATH="$(realpath venv/include)"
          
          # Ë°•ÂÖÖ OpenMP Â§¥Êñá‰ª∂
          wget -O /Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/17.0.0/include/omp.h https://github.com/intel/llvm/raw/refs/heads/sycl/openmp/runtime/src/include/omp.h.var

          echo "‚û°Ô∏è Building LibTorch ${{ needs.get_latest_tag.outputs.tag }}"

          cd pytorch
          git clean -xfd
          
          find scripts -type f -name "*.sh" -exec chmod +x {} +

          export CMAKE_OSX_SYSROOT="$(xcrun --sdk macosx --show-sdk-path)"

          python -m tools.build_libtorch

          ccache -s

      - name: Save LibTorch ccache Cache
        uses: actions/cache/save@v4
        with:
          path: /Users/runner/Library/Caches/ccache
          key: ccache-LibTorch-${{ needs.get_latest_tag.outputs.tag }}

  build_wheel:
    runs-on: macos-15-intel
    needs: [ get_latest_tag, build_libtorch ]
    if: needs.get_latest_tag.outputs.skip_build == 'false'
    strategy:
      matrix:
        python_version: [ 3.11, 3.12, 3.13 ]
    name: Build PyTorch for Python ${{ matrix.python_version }}
    steps:
      - name: Restore PyTorch source from cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: pytorch
          key: pytorch-${{ needs.get_latest_tag.outputs.version }}

      - name: Restore LibTorch ccache Cache
        uses: actions/cache/restore@v4
        with:
          path: /Users/runner/Library/Caches/ccache
          key: ccache-LibTorch-${{ needs.get_latest_tag.outputs.tag }}

      - name: Build wheel
        env:
          USE_CUDA: "OFF"
          USE_CUDNN: "OFF"
          USE_CUSPARSELT: "OFF"
          USE_MPS: "OFF"
          USE_ROCM: "OFF"
          USE_ROCM_KERNEL_ASSERT: "OFF"
          USE_NNPACK: "ON"
          USE_MPI: "OFF"
          USE_DISTRIBUTED: "ON"
          BLAS: "MKL"
          USE_MKLDNN: "ON"
          USE_OPENMP: "ON"
          PYTORCH_BUILD_VERSION: ${{ needs.get_latest_tag.outputs.version }}
          PYTORCH_BUILD_NUMBER: "1"
          CMAKE_OSX_ARCHITECTURES: "x86_64"
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          BUILD_TEST: "OFF"
          CC: "/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
          CXX: "/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
          LDSHARED: "clang -bundle -undefined dynamic_lookup"
        run: |
          set -e

          brew install ccache
          ccache --version

          sudo xcode-select --switch /Applications/Xcode_16.4.app

          export MAX_JOBS=$(sysctl -n hw.logicalcpu)
          if [ "$MAX_JOBS" -gt 4 ]; then
              export MAX_JOBS=4
          fi

          mkdir -p wheels
          
          python${{ matrix.python_version }} -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r pytorch/requirements.txt
          pip install --force-reinstall cmake==3.31.6
          pip install mkl-static==2023.2.2 mkl-include==2023.2.2

          export CMAKE_PREFIX_PATH="$(realpath venv/lib)"
          export CMAKE_INCLUDE_PATH="$(realpath venv/include)"
          
          # Ë°•ÂÖÖ OpenMP Â§¥Êñá‰ª∂
          wget -O /Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/17.0.0/include/omp.h https://github.com/intel/llvm/raw/refs/heads/sycl/openmp/runtime/src/include/omp.h.var

          echo "‚û°Ô∏è Building PyTorch ${{ needs.get_latest_tag.outputs.tag }} with Python ${{ matrix.python_version }}"

          cd pytorch
          git clean -xfd
          
          find scripts -type f -name "*.sh" -exec chmod +x {} +

          export CMAKE_OSX_SYSROOT="$(xcrun --sdk macosx --show-sdk-path)"

          sed -i '' -E -f - setup.py <<'SED'
          /self.copy_file\(source_lib, target_lib\)/,/libomp_relocated = True/ {
            /^[[:space:]]*install_name_tool_args = \[/, /^[[:space:]]*]/ c\
                      install_name_tool_args = ["-delete_rpath", rpath] if "@loader_path" in rpaths else ["-rpath", rpath, "@loader_path"]
          }
          SED

          python setup.py bdist_wheel --plat-name=macosx_11_0_$CMAKE_OSX_ARCHITECTURES

          ccache -s

          cp dist/*.whl ../wheels/
          cd ..
          
          if [ "$(ls wheels/*.whl 2>/dev/null | wc -l)" -eq 0 ]; then
            echo "‚ùå No wheel built. Tag will not be created."
            exit 1
          fi

      - name: Test PyTorch wheel
        id: test-wheel
        run: |
          set -e
          python${{ matrix.python_version }} -m venv test-venv
          source test-venv/bin/activate
          pip install --upgrade pip setuptools
          pip install wheels/*.whl

          python -c "import torch; print(torch.__version__)"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: torch-${{ needs.get_latest_tag.outputs.version }}-py${{ matrix.python_version }}-macosx-wheel
          path: wheels/*.whl

  release:
    needs: [ get_latest_tag, build_libtorch, build_wheel ]
    if: (needs.get_latest_tag.outputs.skip_build == 'false') && (needs.build_wheel.result == 'success') && (github.event_name != 'workflow_dispatch')
    runs-on: macos-15-intel
    name: Create release and upload wheels
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          merge-multiple: true

      - name: Create release and upload wheels
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_latest_tag.outputs.tag }}
          name: "PyTorch ${{ needs.get_latest_tag.outputs.version }} Release"
          files: wheels/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
